#!/usr/bin/env bash

source "$DOTLY_PATH/scripts/core/_main.sh"

SCRIPT_NAME="XXX_SCRIPT_NAME_XXX"
SCRIPT_VERSION="1.0.0"

##? XXX_SCRIPT_DESCRIPTION_XXX
##? 
##?
##? Usage:
##?   XXX_SCRIPT_NAME_XXX -h | --help
##?   XXX_SCRIPT_NAME_XXX -v | --version
##?   XXX_SCRIPT_NAME_XXX -c | --custom-option
##?   XXX_SCRIPT_NAME_XXX subcommand <example_variable> [<example_optional_variable>]
##? This part will be only printed when you call with bad arguments.
##?
##? Options:
##?   -h --help                                                   Show this help
##?   -v --version                                                Show the program version
##?   -c --custom-option                                          With two or more spaces you can add some help
##?   subcomand <example_variable> [<example_optional_variable>]  Also provide a help with subcommand
##? This text will be printed as well when you call -h or --help option
##?
##? Author: XXX_SCRIPT_AUTHOR_XXX <XXX_SCRIPT_AUTHOR_EMAIL_XXX>

# Options part its important because assign short and long version of the params
docs::parse "$@"

# Print name and version
if $version; then
  output::write "$SCRIPT_NAME v$SCRIPT_VERSION"
  exit
fi

# Script part

case $1 in
"subcommand")
  echo "This case is optional and only useful if you want to implement subcommands"
  echo "The example variable value is \"$example_variable\""
  echo "The optional variable value is \"${example_optional_variable:-no value provided}\""
  ;;
*)
  exit 1
  ;;
esac