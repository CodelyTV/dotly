#!/usr/bin/env bash

set -euo pipefail

. "$DOTLY_PATH/scripts/core/_main.sh"
dot::load_library "install.sh"
dot::load_library "dotbot_yaml.sh" "symlinks"
dot::load_library "symlinks.sh" "symlinks"

export ZIM_HOME="$DOTLY_PATH/modules/zimfw"
export PATH="$HOME/.cargo/bin:$PATH"

backup_and_warn_if_exists() {
  local file_path suffix bk_file_path
  file_path="${1:-}"
  suffix="${2:-}"

  [[ -n "$file_path" ]] && bk_file_path="$(files::backup_if_file_exists "$file_path" "$suffix")"
  [[ -n "$bk_file_path" ]] && output::error "'$file_path' exists and was moved to '$bk_file_path'"
}

yaml_file_backup() {
  local yaml_file links
  yaml_file="${1:-}"

  for link in $(dotbot::get_all_keys_in "link" "$(symlinks::get_file_path "$yaml_file")"); do
    link="$(eval realpath -q -m -s "$link")"

    if [[ -f "$link" ]]; then
      if ! ${quiet_symlinks:-} &&
        output::yesno "File '$link' exists. Do you want to backup it"
      then
        backup_and_warn_if_exists "$link" "$rename_suffix"
      fi
    fi
  done
}

dotly_install_symlinks() {
  local -r CONFIG="$DOTLY_PATH/scripts/self/src/symlinks/${1:-}"
  shift

  [[ ! -f "$CONFIG" ]] && return

  echo
  "$DOTLY_PATH/modules/dotbot/bin/dotbot" "$@" "$CONFIG" || true
  echo
}

if platform::is_macos; then
  output::answer "üçé Setting up macOS platform"
  install_macos_custom
fi

script::depends_on docpars fzf zsh python jq
# PR Review note
# script::depends_on will fail for `moreutils` package
# because moreutils is not a binary
"$DOTLY_PATH/bin/dot" package add moreutils
# The same for python-yq
"$DOTLY_PATH/bin/dot" package add python-yq

##? Install dotly and setup dotfiles
##?
##? Usage:
##?    install [[-n | --never-backup] | [-b |--always-backup]] [-s | --quiet-symlinks]
##?
##? Options:
##?    -h --help            Prints this help
##?    -n --never-backup    Never do a backup without prompt
##?    -b --always-backup   Always do a backup without prompt
##?    -s --quiet-symlinks  Run dotbot in super quiet mode. If backup, do it
##?                         without asking.
##?
docs::parse "$@"

output::answer "Creating dotfiles structure"
"$DOTLY_PATH/bin/dot" dotfiles create | log::file "Creating dotfiles structure" || exit 1

# Which yaml files
yaml_files=("conf.yaml")

if platform::is_macos; then
  if platform::is_macos_arm; then
    yaml_files+=("conf.macos.yaml")
  else
    yaml_files+=("conf.macos-intel.yaml")
  fi
else
  yaml_files+=("conf.linux.yaml")
fi

_args=()
if ${quiet_symlinks:-false}; then
  _args+=(--super-quiet)
fi

_args+=(
  -d
  "$DOTFILES_PATH"
  -c
)

# Dotly install symlinks
for yaml_file in "${yaml_files[@]}"; do
  dotly_install_symlinks "$yaml_file" "${_args[@]}"
done

if platform::command_exists yq && platform::command_exists jq; then
  # Make a backup of existing current dotfiles
  if ! ${always_backup:-} &&\
    ! ${never_backup:-} &&\
    output::yesno "Do you want to perform a backup of your current existing dotfiles if they exists"
  then
    always_backup=true
  fi

  if ${always_backup:-false}; then
    rename_suffix=$(date +%s)

    for yaml_file in "${yaml_files[@]}"; do
      yaml_file="$(symlinks::get_file_path "$yaml_file")"

      [[ ! -f "$yaml_file" ]] && continue
      links=($(dotbot::get_all_keys_in "link" "$(symlinks::get_file_path "$yaml_file")"))

      for link in "${links[@]}"; do
        link="$(eval realpath -q -m -s "$link")"

        if [[ -f "$link" ]]; then
          if ! ${quiet_symlinks:-} &&
            ! output::yesno "File '$link' exists. Do you want to backup it"
          then
            continue
          fi

          backup_and_warn_if_exists "$link" "$rename_suffix"
        fi
      done
    done
  fi
else
  output::error "üö® Backup can not be performed because \`yq\` or \`jq\` commands are not available."
  output::error "If you continue be sure to make a backup first of you existing .bashrc, .zshrc and any other shell files."
  output::yesno "Do you want to continue now" || exit 5
fi

# Apply user symlinks
output::answer "Setting up symlinks"
if ${quiet_symlinks:-false}; then
  "$DOTLY_PATH/bin/dot" symlinks apply --quiet | log::file "Applying symlinks" || true
else
  "$DOTLY_PATH/bin/dot" symlinks apply | log::file "Applying symlinks" || output::write "Error applying symlinks, see `dot self backup`"
fi
touch "$HOME/.z"

if ! str::contains zsh "$SHELL"; then
  output::answer "Setting zsh as the default shell"
  sudo chsh -s "$(command -v zsh)" | log::file "Setting zsh as default shell"
fi

output::empty_line
output::answer "Installing zim"
if zsh "$ZIM_HOME/zimfw.zsh" install | log::file "Installing zim"; then
  output::solution "ZIM Framework Installed"
else
  output::error "ZIM Framework could not be installed"
  output::write "Use `dot self debug` to view what happened"
  output::write "You will need to run manually the ZIM Framework install command"
  output::write "  zsh \"$ZIM_HOME/zimfw.zsh\" install"
fi

output::empty_line
output::answer "Installing completions"
"$DOTLY_PATH/bin/dot" shell zsh reload_completions || output::error "Error reloading completions"

output::answer "Executing custom restoration scripts"
install_scripts_path="$DOTFILES_PATH/restoration_scripts"
if [ -d "$install_scripts_path" ]; then
  find "$install_scripts_path" -mindepth 1 -maxdepth 1 -type l,f -name '*.sh' |
    sort |
    while read -r install_script; do
      { [[ -x "$install_script" ]] && . "$install_script" | log::file "Executing afterinstall: $(basename "$install_script")"; } || {
        output::error "Install script error in $(basename "$install_script")"
      }
    done
fi

output::empty_line
output::solution "üèÅ Now restart your terminal to finish the installation"
