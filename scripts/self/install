#!/usr/bin/env bash

set -euo pipefail

. "$DOTLY_PATH/scripts/core/_main.sh"
dot::get_script_src_path "install.sh"
dot::get_script_src_path "dotbot_yaml_edit.sh" "symlinks"
dot::get_script_src_path "symlinks.sh" "symlinks"

export ZIM_HOME="$DOTLY_PATH/modules/zimfw"

installer::install_zsh() {
  output::error "zsh not installed, installing"

  if ! "$DOTLY_PATH/bin/dot" package install zsh | log::file "Installing zsh"; then
    output::error "Could not install zsh!"
    exit 5
  fi
}

installer::install_fzf() {
  output::error "fzf not installed, installing"

  if ! "$DOTLY_PATH/bin/dot" package install fzf | log::file "Installing fzf"; then
    output::error "Could not install fzf!"
    exit 5
  fi
}

installer::install_jq() {
  output::error "jq not installed, installing"

  if ! "$DOTLY_PATH/bin/dot" package install jq | log::file "Installing jq"; then
    output::error "Could not install jq!"
    exit 5
  fi
}

installer::install_moreutils() {
  output::error "Moreutils not installed, installing"

  if ! "$DOTLY_PATH/bin/dot" package install moreutils | log::file "Installing moreutils"; then
    output::error "Could not install moreutils!"
    exit 5
  fi
}

installer::install_rust() {
  output::error "rust not installed, installing"

  if platform::command_exists apt; then
    sudo apt install -y build-essential 2>&1 | log::file "Installing build-essential"
  fi

  curl https://sh.rustup.rs -sSf | sh -s -- -y | log::file "Installing rust from sources"

  export PATH="$HOME/.cargo/bin:$PATH"
}

backup_and_warn_if_exists() {
  local file_path suffix bk_file_path
  file_path="${1:-}"
  suffix="${2:-}"

  [[ -n "$file_path" ]] && bk_file_path="$(files::backup_if_file_exists "$file_path" "$suffix")"
  [[ -n "$bk_file_path" ]] && output::error "'$file_path' exists and was moved to '$bk_file_path'"
}

yaml_file_backup() {
  local yaml_file links
  yaml_file="${1:-}"

  for link in $(dotbot::get_all_keys_in "link" "$(symlinks::get_file_path "$yaml_file")"); do
    link="$(eval realpath -q -m -s "$link")"

    if [[ -f "$link" ]]; then
      if ! ${quiet_symlinks:-} &&
        output::yesno "File '$link' exists. Do you want to backup it"
      then
        echo "$link"
        # backup_and_warn_if_exists "$link" "$rename_suffix"
      fi
    fi
  done
}

dotly_install_symlinks() {
  local -r CONFIG="$DOTLY_PATH/scripts/self/src/symlinks/${1:-}"
  shift

  [[ ! -f "$CONFIG" ]] && return

  echo
  "$DOTLY_PATH/modules/dotbot/bin/dotbot" "$@" "$CONFIG"
  echo
}

if platform::is_macos; then
  output::answer "üçé Setting up macOS platform"
  install_macos_custom
fi

! platform::command_exists cargo && installer::install_rust

! platform::command_exists docpars && output::error "docpars not installed, installing" && "$DOTLY_PATH/bin/dot" package install docpars | log::file "Installing docpars"
! platform::command_exists delta && output::error "delta not installed, installing" && "$DOTLY_PATH/bin/dot" package install git-delta | log::file "Installing git delta"

##? Install dotly and setup dotfiles
##?
##? Usage:
##?    install [[-n | --never-backup] | [-b |--always-backup]] [-s | --quiet-symlinks]
##?
##? Options:
##?    -h --help            Prints this help
##?    -n --never-backup    Never do a backup without prompt
##?    -b --always-backup   Always do a backup without prompt
##?    -s --quiet-symlinks  Run dotbot in super quiet mode. If backup, do it
##?                         without asking.
##?
docs::parse "$@"

output::answer "Creating dotfiles structure"
"$DOTLY_PATH/bin/dot" dotfiles create | log::file "Creating dotfiles structure"

set +e # Avoid exit if fail a script because dot symlinks apply could fail

# Which yaml files
yaml_files=("conf.yaml")

if platform::is_macos; then
  if platform::is_macos_arm; then
    yaml_files+=("conf.macos.yaml")
  else
    yaml_files+=("conf.macos-intel.yaml")
  fi
else
  yaml_files+=("conf.linux.yaml")
fi

_args=()
if ${quiet_symlinks:-false}; then
  _args+=(--super-quiet)
fi

_args+=(
  -d
  "$DOTFILES_PATH"
  -c
)

# Dotly install symlinks
for yaml_file in "${yaml_files[@]}"; do
  dotly_install_symlinks "$yaml_file" "${_args[@]}"
done

# Make a backup of existing current dotfiles
if ! ${always_backup:-} &&\
   ! ${never_backup:-} &&\
   output::yesno "Do you want to perform a backup of your current existing dotfiles if they exists"
then
  always_backup=true
fi

if ${always_backup:-false}; then
  rename_suffix=$(date +%s)

  for yaml_file in "${yaml_files[@]}"; do
    yaml_file="$(symlinks::get_file_path "$yaml_file")"

    [[ ! -f "$yaml_file" ]] && continue
    links=($(dotbot::get_all_keys_in "link" "$(symlinks::get_file_path "$yaml_file")"))

    for link in "${links[@]}"; do
      link="$(eval realpath -q -m -s "$link")"

      if [[ -f "$link" ]]; then
        if ! ${quiet_symlinks:-} &&
          ! output::yesno "File '$link' exists. Do you want to backup it"
        then
          continue
        fi

        backup_and_warn_if_exists "$link" "$rename_suffix"
      fi
    done
  done
fi

# Apply user symlinks
output::answer "Setting up symlinks"
if ${quiet_symlinks:-false}; then
  "$DOTLY_PATH/bin/dot" symlinks apply --quiet | log::file "Applying symlinks"
else
  "$DOTLY_PATH/bin/dot" symlinks apply | log::file "Applying symlinks"
fi
touch "$HOME/.z"

set -e # End of avoid exit if fail a script

! platform::command_exists fzf && installer::install_fzf
! platform::command_exists zsh && installer::install_zsh
! platform::command_exists jq && installer::install_jq
! platform::command_exists sponge && installer::install_moreutils

if ! str::contains zsh "$SHELL"; then
  output::answer "Setting zsh as the default shell"
  sudo chsh -s "$(command -v zsh)" | log::file "Setting zsh as default shell"
fi

output::answer "Installing zim"
zsh "$ZIM_HOME/zimfw.zsh" install | log::file "Installing zim"

output::answer "Installing completions"
"$DOTLY_PATH/bin/dot" shell zsh reload_completions
