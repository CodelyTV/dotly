#!/usr/bin/env bash

set -euo

source "$DOTLY_PATH/scripts/core/_main.sh"
source "$DOTLY_PATH/scripts/self/utils/install.sh"

export ZIM_HOME="$DOTLY_PATH/modules/zimfw"
export PATH="$HOME/.cargo/bin:$PATH"
output::write "3 antes del mensaje"

installer::install_zsh() {
  output::error "zsh not installed, installing"

  if ! "$DOTLY_PATH/bin/dot" package add zsh | log::file "Installing zsh"; then
    output::error "Could not install zsh!"
    exit 5
  fi
}
output::write " 2 antes del mensaje"

installer::install_fzf() {
  output::error "fzf not installed, installing"

  if ! "$DOTLY_PATH/bin/dot" package add fzf | log::file "Installing fzf"; then
    output::error "Could not install fzf!"
    exit 5
  fi
}

if platform::is_macos; then
  output::answer "üçé Setting up macOS platform"
  install_macos_custom
fi

output::write "antes del mensaje"
script::depends_on docpars

##? Install dotly and setup dotfiles
##?
##? Usage:
##?    install
docs::parse "$@"

output::answer "Creating dotfiles structure"
"$DOTLY_PATH/bin/dot" dotfiles create | log::file "Creating dotfiles structure" || exit 1

# @todo Backup if exists before
output::answer "Setting up symlinks"
"$DOTLY_PATH/bin/dot" symlinks apply | log::file "Applying symlinks" || true
touch "$HOME/.z"

! platform::command_exists fzf && installer::install_fzf
! platform::command_exists zsh && installer::install_zsh

if ! str::contains zsh "$SHELL"; then
  output::answer "Setting zsh as the default shell"
  sudo chsh -s "$(command -v zsh)" | log::file "Setting zsh as default shell"
fi

output::answer "Installing zim"
zsh "$ZIM_HOME/zimfw.zsh" install | log::file "Installing zim"

output::answer "Installing completions"
"$DOTLY_PATH/bin/dot" shell zsh reload_completions

output::answer "Executing custom restore scripts"
install_scripts_path="$DOTFILES_PATH/restore_scripts"
if [ -d "$install_scripts_path" ]; then
  find "$install_scripts_path" -mindepth 1 -maxdepth 1 -type l,f -name '*.sh' |
    sort |
    while read -r install_script; do
      { [[ -x "$install_script" ]] && . "$install_script" | log::file "Executing afterinstall: $(basename "$install_script")"; } || {
        output::error "Install script error in $(basename "$install_script")"
      }
    done
fi
