#!/usr/bin/env bash

. "$DOTLY_PATH/scripts/core/_main.sh"
. "$DOTLY_PATH/scripts/ssh/lib/ssh.sh"

DOTFILES_SSH_CONFIGD="${DOTFILES_SSH_CONFIGD:-$DOTFILES_PATH/ssh/config.d}"
DOTFILES_SSH_CONFIG_ENABLED="${DOTFILES_SSH_CONFIG_ENABLED:-"$DOTFILES_PATH/ssh/config.d-enabled"}"

##? Create ssh configurations, enable or disable them easily
##? 
##?
##? Usage:
##?   append [-h | --help]
##?   append [-v | --version]
##?   append <ssh_alias_or_file> <option> <value>
##?
##? Options:
##?   -h --help                                    Show this help
##?   -v --version                                 Show the program version
##?   append <ssh_alias_or_file> <option> <value>  Append or modify "option" to SSH file with the alias or the
##?                                                file specified.
##?
##? Author:
##?   Gabriel Trabanco Llano <gtrabanco@users.noreply.github.co>

# Options part its important because assign short and long version of the params
docs::parse "$@"

SCRIPT_NAME="dot ssh append"
SCRIPT_VERSION="1.0.0"

# Print name and version
if $version; then
  output::write "$SCRIPT_NAME v$SCRIPT_VERSION"
  exit
fi

ssh_file="$(ssh::check_configd_file_name "${ssh_alias_or_file:-}")"
[[ -z "$ssh_file" ]] && ssh_file="$(ssh::get_configd_file_by_alias "${ssh_alias_or_file:-}")"

# Delete the option if exists
file_line="$(cat -n "$ssh_file" | grep "$option" | awk '{print $1}')"
[[ -n "$file_line" ]] && sed -i "${file_line}d" "$ssh_file"

# Append the option
echo "    $option $value" >> "$ssh_file"
output::solution "'$option' added or modified."