#!/usr/bin/env bash

{

set -euo pipefail

##? Setups the environment
##?
##? Usage:
##?    install




red='\033[0;31m'
green='\033[0;32m'
purple='\033[0;35m'
normal='\033[0m'

_w() {
  local -r text="${1:-}"
  echo -e "$text"
}
_a() { _w " > $1"; }
_e() { _a "${red}$1${normal}"; }
_s() { _a "${green}$1${normal}"; }
_q() { read -rp "ü§î $1: " "$2"; }
_pk() { read -rp "Press a key to ${1}... üëá" "REPLY"; }

current_timestamp() { date +%s; }

command_exists() {
  type "$1" >/dev/null 2>&1
}

install_brew_osx() {
  if [[ "$OSTYPE" =~ ^[darwin] ]] && ! command_exists brew; then
    _w "Installing brew package manager for macOS üíæ"
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
  fi
}

package_install () {
  install_brew_osx #Without this it will try to use apt
  # Because apt that is not package manager exists on macOS
  if command_exists dnf; then
    _a "Installing ${1} using dnf"
    sudo dnf -y install "${1}" >/dev/null 2>&1
  elif command_exists yum; then
    _a "Installing ${1} using yum"
    yes | sudo yum install "${1}" >/dev/null 2>&1
  elif command_exists brew; then
    _a "Installing ${1} using brew"
    yes | brew install "${1}" # >/dev/null 2>&1
  elif command_exists pacman; then
    _a "Installing ${1} using pacman"
    sudo pacman -S --noconfirm "${1}" >/dev/null 2>&1
  elif command_exists apt; then
    _a "Installing ${1} using apt"
    sudo apt -y install "${1}" >/dev/null 2>&1
  else
    _e "Could not install '${1}', no package provider found"
  fi
}

git_install_dotfiles() {
    local GIT_URL="$1"
    local DOTFILES_PATH="$2"
    git clone "${GIT_URL}" "${DOTFILES_PATH}"
    cd "${DOTFILES_PATH}"
    git submodule update --init --recursive
}

_w "  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê"
_w "~ ‚îÇ üöÄ Welcome to the ${green}dotly${normal} restorer!  ‚îÇ ~"
_w "  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò"
_w

# Git Install
_w "Checking if Git is installed"
if ! command_exists git; then
  _e "Git is not installed, trying to install"

  if [[ "$OSTYPE" =~ ^[darwin] ]]; then
    #_a "Updating macOS üåç"
    #sudo softwareupdate -i -a
    
    _a "Checking if Command Line Tools are installed üïµÔ∏è‚Äç‚ôÇÔ∏è"
    
    xcode-select --install 2>&1 | grep installed > /dev/null
    if [[ $? ]]; then
      _a "Installing Command Line Tools üì∫"
      xcode-select --install
      _pk "to continue the installation after Command Line Tools installation has finished"
    fi
  else
    package_install git
  fi
  
  if [[ $? ]]; then
      exit 1
  fi
fi
_s "Git is installed on this system"

# Files locations
_q "Where do you want your dotfiles to be located? (default ~/.dotfiles)" "DOTFILES_PATH"
DOTFILES_PATH="${DOTFILES_PATH:-"$HOME/.dotfiles"}"
DOTFILES_PATH="$(eval echo "$DOTFILES_PATH")"
export DOTFILES_PATH="$DOTFILES_PATH"

# Menu to select from where you want to restore your files
PS3="From where you want to install your dotfiles: "
options=("GitHub" "Keybase" "Other Git alternative" "Quit")
GIT_URL=""
select opt in "${options[@]}"
do
  case $opt in
    "GitHub")
      GITHUB_USER=""
      while [ -z "$GITHUB_USER" ]; do
          _q "üë§ Which is your github user?" "GITHUB_USER"
      done

      GITHUB_REPOSITORY_NAME=""
      while [ -z "$GITHUB_REPOSITORY_NAME" ]; do
          _q "üì¶ Which is your github repository?" "GITHUB_REPOSITORY_NAME"
      done
      
      GIT_URL="git@github.com:$GITHUB_USER/$GITHUB_REPOSITORY_NAME.git"
      _w "  Remember that if your dotfiles repository is private you"
      _w "need to generate or restore the ssh key and added to your"
      _w "github account in:"
      _w "  - Github > Settings > SSH and GPG Keys > Add new SSH key"
      _w
      _pk "continue when ready"
      break
      ;;
    "Keybase")
      _w "Checking if keybase is installed"

      if ! command_exists keybase; then
        _w "Keybase has not been detected. We will try to install it with the package manager."
        package_install keybase

        if ! command_exists keybase; then
          _e "Keybase could not be installed, try by yourself, do a login and re run this script."
          exit 1
        fi
      fi
      _s "Keybase is installed"
      
      KEYBASE_USER=""
      while [ -z "$KEYBASE_USER" ]; do
          _q "üë§ Which is your Keybase user?" "KEYBASE_USER"
      done

      KEYBASE_REPOSITORY_NAME=""
      _q "üì¶ Which is your Keybase repository name? [dotfiles]" "KEYBASE_REPOSITORY_NAME"
      KEYBASE_REPOSITORY_NAME="${KEYBASE_REPOSITORY_NAME:-"dotfiles"}"

      GIT_URL="keybase://private/${KEYBASE_USER}/${KEYBASE_REPOSITORY_NAME}"
      _w "  Remember that you need to start Keybase for the first time and login."
      _w "  If you don't do this first the install will fail"
      _w
      _pk "continue when ready"
      
      break
      ;;
    "Other Git alternative")
      while [ -z "$GIT_URL" ]; do
          _q "üë§ Which is your git repo url?" "GIT_URL"
      done
      break
      ;;
    "Quit")
      _w "Bye!"
      exit 0
      ;;
    *)
      echo "invalid option $REPLY"
      ;;
  esac
done

# Recovering your files
git_install_dotfiles "${GIT_URL}" "${DOTFILES_PATH}"
"$DOTLY_PATH/bin/dot" self install
_a "üéâ dotfiles restored! üéâ"

# Installing packages
_q "üì¶ Do you want to import previous installed packages? [Y/n]" "USER_IMPORT_PACKAGES"
USER_IMPORT_PACKAGES=${USER_IMPORT_PACKAGES:-'Y'}
[[ "$USER_IMPORT_PACKAGES" =~ ^[Yy] ]] && "$DOTLY_PATH/bin/dot" package import

# Importing defaults on macOS
if [[ "$OSTYPE" =~ ^[darwin] ]]; then
  _w
  _w "If you want to import your previous macOS settings, if would be done from the"
  _w "default directory $DOTFILES_PATH/os/mac/settings, if you want to restore it"
  _w "from another path, do it manually executing 'dot mac defaults import /path/to'"
  _w
  _w "IMPORTANT! This overwrite all your current configuration if you answer with 'y'"
  _w
  _q "‚öôÔ∏è Do you want to import stored macOS configuration? [y/N]" "USER_OSX_SETTINGS"
  [[ "$USER_OSX_SETTINGS" =~ ^[Yy] ]] && "$DOTLY_PATH/bin/dot" mac defaults import
fi
_a "üéâ dotfiles restored! üéâ"
_a "Please, restart your terminal to see the changes."
_pk "exit terminal"
exit
}
